BNF

> Variáveis

<identifier> ::= <letter> , { <letter> | <digit> | "_" } ;
<letter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

> Código Base
<code> ::= “begin elements;” , <variable_declarations> , “end elements; begin action;” , <code_instructions> , “end action;”

>Retorno
return::= return <identifier>| return <function> | return <operation> | return <assignment>;

> Atribuição
assignment ::= <identifier>, {<identifier>} = <string> | <integer> | <function> | <floating_point> | <boolean> | <sketch_type> , {<string> | <integer> | <function> | <floating_point> | <boolean> | <sketch_type> };

> Sketch Type
<sketch_type> ::= 
(“tree(”,<integer>,”,”,<integer>,”,” , <string> ,”,” , <string>, “)”) | 
(“swarm(“,<floating_point>,”,”,<floating_point>,”,”,<string>,”)”)|
(“web(”,<integer>,”,” , <integer> ,"," , <string> , “)”) | 
(“square(”,<integer>,”,”,<integer>,”,” , <string> , “)”) | 
(“circle(”,<integer>,”,” , <string> , “)”) | 

> Declaração
declaration ::= <data_type_list> <identifier>, {<identifier>} = <letter> | <digit> | <function>, {<letter> | <digit> | <function>};

> Funções 
function ::= <data_type_list> <identifier> ({<identifier>}|{<function>}){<code_instructions> <return>;}

> Operação
operation::= <identifier><mathElements_list><identifier> | <function><mathElements_list><identifier>

> Condicional
conditional::= {<identifier><logicElements_list><identifier>}| {<identifier><logicElements_list><identifier><logic_list><identifier><logicElements_list><identifier>}| <assignment> | <operation>

>Laços de Repetição
loop_token ::= <for> | <while>

> For
for::= for ( {<identifier>}|<> ; {<conditional>} ; {<identifier>} | {<identifier><math_operator><math_operator>} | {<function>} ) {<code_instructions>}

> While
while::= while({<conditional>}|{<identifier>}| <literal_list>) {code_instructions}

> If
if::= if({<conditional>}|{<identifier>}) {code_instructions}

> Else
else::= if({<conditional>}|{<identifier>}){code_instructions} else({<conditional>}|{<identifier>}) {code_instructions}

> Else if
else if::= if({<conditional>}|{<identifier>}){code_instructions} else if({<conditional>}|{<identifier>}) {code_instructions}

> Switch Case
(precisa mesmo disso?)
